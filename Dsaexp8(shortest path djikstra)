#include <iostream>
#include <vector>
#include <climits>
using namespace std;

// Class to represent a graph
class Graph {
    int V;                     // Number of vertices
    vector<vector<int>> adj;   // Adjacency matrix

public:
    Graph(int vertices) {
        V = vertices;
        adj.resize(V, vector<int>(V, 0)); // Initialize adjacency matrix with 0
    }

    // Add an edge to the graph
    void addEdge(int u, int v, int weight) {
        adj[u][v] = weight;
        adj[v][u] = weight; // For undirected graph
    }

    // Display the adjacency matrix
    void displayAdjMatrix() {
        cout << "Adjacency Matrix Representation:\n";
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                cout << adj[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Dijkstra's Algorithm
    void dijkstra(int source) {
        vector<int> dist(V, INT_MAX); // Stores shortest distance to each node
        vector<bool> visited(V, false); // Tracks visited nodes

        dist[source] = 0; // Distance to source is 0

        for (int count = 0; count < V - 1; count++) {
            // Find the unvisited node with the smallest distance
            int u = -1;
            for (int i = 0; i < V; i++) {
                if (!visited[i] && (u == -1 || dist[i] < dist[u])) {
                    u = i;
                }
            }

            visited[u] = true; // Mark the node as visited

            // Update distances for neighbors of the current node
            for (int v = 0; v < V; v++) {
                if (!visited[v] && adj[u][v] && dist[u] + adj[u][v] < dist[v]) {
                    dist[v] = dist[u] + adj[u][v];
                }
            }
        }

        // Print shortest distances
        cout << "Shortest distances from source " << source << ":\n";
        for (int i = 0; i < V; i++) {
            cout << "To " << i << ": " << dist[i] << endl;
        }
    }
};

int main() {
    int vertices = 5; // Number of landmarks
    Graph g(vertices);

    // Adding edges with distances between landmarks
    g.addEdge(0, 1, 2);
    g.addEdge(0, 2, 4);
    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 7);
    g.addEdge(2, 4, 3);
    g.addEdge(3, 4, 2);

    // Display adjacency matrix
    g.displayAdjMatrix();

    // Find shortest path using Dijkstra's algorithm
    int source = 0; // Starting from landmark 0
    g.dijkstra(source);

    return 0;
}
