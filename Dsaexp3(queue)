#include <iostream>
#define SIZE 5 // Define the size of the circular queue 

using namespace std; 

class CircularQueue {
    int front, rear;
    int arr[SIZE];
    
public:
    CircularQueue() {
        front = -1;
        rear = -1;
    } 

    // Function to check if the queue is empty
    bool isEmpty() {
        return (front == -1);
    } 

    // Function to check if the queue is full
    bool isFull() {
        return ((rear + 1) % SIZE == front);
    } 

    // Enqueue operation (Insertion)
    void enqueue(int value) {
        if (isFull()) {
            cout << "Queue is full! Cannot insert " << value << endl;
            return;
        }
        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % SIZE;
        }
        arr[rear] = value;
        cout << "Inserted " << value << endl;
    } 

    // Dequeue operation (Deletion)
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty! Cannot delete." << endl;
            return;
        }
        cout << "Deleted " << arr[front] << endl;
        if (front == rear) {
            // Queue becomes empty
            front = rear = -1;
        } else {
            front = (front + 1) % SIZE;
        }
    } 

    // Display operation
    void display() {
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
            return;
        }
        cout << "Queue elements: ";
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % SIZE;
        }
        cout << endl;
    }
}; 

int main() {
    CircularQueue cq; 

    cq.enqueue(10);
    cq.enqueue(20);
    cq.enqueue(30);
    cq.enqueue(40);
    cq.enqueue(50); // Queue becomes full here
    cq.enqueue(60); // Should display "Queue is full!" 

    cq.display(); 

    cq.dequeue();
    cq.dequeue(); 

    cq.display(); 

    cq.enqueue(60);
    cq.enqueue(70); 

    cq.display(); 

    return 0;
}

